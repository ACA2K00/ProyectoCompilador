Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statement
Rule 2     statement -> declarations ; statement
Rule 3     statement -> print ; statement
Rule 4     statement -> empty
Rule 5     empty -> <empty>
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     declarations -> declaration_type_name
Rule 9     declarations -> declaration_assign_expression
Rule 10    declarations -> declaration_full
Rule 11    declaration_type_name -> type NAME
Rule 12    declaration_assign_expression -> NAME = expression
Rule 13    declaration_full -> type NAME = expression
Rule 14    print -> PRINT expression
Rule 15    expression -> expression + expression
Rule 16    expression -> expression - expression
Rule 17    expression -> expression * expression
Rule 18    expression -> expression / expression
Rule 19    expression -> expression ^ expression
Rule 20    expression -> - expression
Rule 21    expression -> ( expression )
Rule 22    expression -> INUM
Rule 23    expression -> FNUM
Rule 24    expression -> NAME

Terminals, with rules where they appear

(                    : 21
)                    : 21
*                    : 17
+                    : 15
-                    : 16 20
/                    : 18
;                    : 2 3
=                    : 12 13
FLOAT                : 7
FNUM                 : 23
INT                  : 6
INUM                 : 22
NAME                 : 11 12 13 24
PRINT                : 14
^                    : 19
error                : 

Nonterminals, with rules where they appear

declaration_assign_expression : 9
declaration_full     : 10
declaration_type_name : 8
declarations         : 2
empty                : 4
expression           : 12 13 14 15 15 16 16 17 17 18 18 19 19 20 21
init                 : 0
print                : 3
statement            : 1 2 3
type                 : 11 13

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (8) declarations -> . declaration_type_name
    (9) declarations -> . declaration_assign_expression
    (10) declarations -> . declaration_full
    (14) print -> . PRINT expression
    (5) empty -> .
    (11) declaration_type_name -> . type NAME
    (12) declaration_assign_expression -> . NAME = expression
    (13) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    init                           shift and go to state 1
    statement                      shift and go to state 2
    declarations                   shift and go to state 3
    print                          shift and go to state 4
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 1

    (0) S' -> init .



state 2

    (1) init -> statement .

    $end            reduce using rule 1 (init -> statement .)


state 3

    (2) statement -> declarations . ; statement

    ;               shift and go to state 14


state 4

    (3) statement -> print . ; statement

    ;               shift and go to state 15


state 5

    (4) statement -> empty .

    $end            reduce using rule 4 (statement -> empty .)


state 6

    (8) declarations -> declaration_type_name .

    ;               reduce using rule 8 (declarations -> declaration_type_name .)


state 7

    (9) declarations -> declaration_assign_expression .

    ;               reduce using rule 9 (declarations -> declaration_assign_expression .)


state 8

    (10) declarations -> declaration_full .

    ;               reduce using rule 10 (declarations -> declaration_full .)


state 9

    (14) print -> PRINT . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 16

state 10

    (11) declaration_type_name -> type . NAME
    (13) declaration_full -> type . NAME = expression

    NAME            shift and go to state 22


state 11

    (12) declaration_assign_expression -> NAME . = expression

    =               shift and go to state 23


state 12

    (6) type -> INT .

    NAME            reduce using rule 6 (type -> INT .)


state 13

    (7) type -> FLOAT .

    NAME            reduce using rule 7 (type -> FLOAT .)


state 14

    (2) statement -> declarations ; . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (8) declarations -> . declaration_type_name
    (9) declarations -> . declaration_assign_expression
    (10) declarations -> . declaration_full
    (14) print -> . PRINT expression
    (5) empty -> .
    (11) declaration_type_name -> . type NAME
    (12) declaration_assign_expression -> . NAME = expression
    (13) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    declarations                   shift and go to state 3
    statement                      shift and go to state 24
    print                          shift and go to state 4
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 15

    (3) statement -> print ; . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (8) declarations -> . declaration_type_name
    (9) declarations -> . declaration_assign_expression
    (10) declarations -> . declaration_full
    (14) print -> . PRINT expression
    (5) empty -> .
    (11) declaration_type_name -> . type NAME
    (12) declaration_assign_expression -> . NAME = expression
    (13) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    print                          shift and go to state 4
    statement                      shift and go to state 25
    declarations                   shift and go to state 3
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 16

    (14) print -> PRINT expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    ;               reduce using rule 14 (print -> PRINT expression .)
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    ^               shift and go to state 30


state 17

    (20) expression -> - . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 31

state 18

    (21) expression -> ( . expression )
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 32

state 19

    (22) expression -> INUM .

    +               reduce using rule 22 (expression -> INUM .)
    -               reduce using rule 22 (expression -> INUM .)
    *               reduce using rule 22 (expression -> INUM .)
    /               reduce using rule 22 (expression -> INUM .)
    ^               reduce using rule 22 (expression -> INUM .)
    ;               reduce using rule 22 (expression -> INUM .)
    )               reduce using rule 22 (expression -> INUM .)


state 20

    (23) expression -> FNUM .

    +               reduce using rule 23 (expression -> FNUM .)
    -               reduce using rule 23 (expression -> FNUM .)
    *               reduce using rule 23 (expression -> FNUM .)
    /               reduce using rule 23 (expression -> FNUM .)
    ^               reduce using rule 23 (expression -> FNUM .)
    ;               reduce using rule 23 (expression -> FNUM .)
    )               reduce using rule 23 (expression -> FNUM .)


state 21

    (24) expression -> NAME .

    +               reduce using rule 24 (expression -> NAME .)
    -               reduce using rule 24 (expression -> NAME .)
    *               reduce using rule 24 (expression -> NAME .)
    /               reduce using rule 24 (expression -> NAME .)
    ^               reduce using rule 24 (expression -> NAME .)
    ;               reduce using rule 24 (expression -> NAME .)
    )               reduce using rule 24 (expression -> NAME .)


state 22

    (11) declaration_type_name -> type NAME .
    (13) declaration_full -> type NAME . = expression

    ;               reduce using rule 11 (declaration_type_name -> type NAME .)
    =               shift and go to state 33


state 23

    (12) declaration_assign_expression -> NAME = . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 34

state 24

    (2) statement -> declarations ; statement .

    $end            reduce using rule 2 (statement -> declarations ; statement .)


state 25

    (3) statement -> print ; statement .

    $end            reduce using rule 3 (statement -> print ; statement .)


state 26

    (15) expression -> expression + . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 35

state 27

    (16) expression -> expression - . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 36

state 28

    (17) expression -> expression * . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 37

state 29

    (18) expression -> expression / . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 38

state 30

    (19) expression -> expression ^ . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 39

state 31

    (20) expression -> - expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    +               reduce using rule 20 (expression -> - expression .)
    -               reduce using rule 20 (expression -> - expression .)
    *               reduce using rule 20 (expression -> - expression .)
    /               reduce using rule 20 (expression -> - expression .)
    ^               reduce using rule 20 (expression -> - expression .)
    ;               reduce using rule 20 (expression -> - expression .)
    )               reduce using rule 20 (expression -> - expression .)

  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]
  ! ^               [ shift and go to state 30 ]


state 32

    (21) expression -> ( expression . )
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    )               shift and go to state 40
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    ^               shift and go to state 30


state 33

    (13) declaration_full -> type NAME = . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . expression ^ expression
    (20) expression -> . - expression
    (21) expression -> . ( expression )
    (22) expression -> . INUM
    (23) expression -> . FNUM
    (24) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 41

state 34

    (12) declaration_assign_expression -> NAME = expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    ;               reduce using rule 12 (declaration_assign_expression -> NAME = expression .)
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    ^               shift and go to state 30


state 35

    (15) expression -> expression + expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    +               reduce using rule 15 (expression -> expression + expression .)
    -               reduce using rule 15 (expression -> expression + expression .)
    ;               reduce using rule 15 (expression -> expression + expression .)
    )               reduce using rule 15 (expression -> expression + expression .)
    *               shift and go to state 28
    /               shift and go to state 29
    ^               shift and go to state 30

  ! *               [ reduce using rule 15 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 15 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]


state 36

    (16) expression -> expression - expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    +               reduce using rule 16 (expression -> expression - expression .)
    -               reduce using rule 16 (expression -> expression - expression .)
    ;               reduce using rule 16 (expression -> expression - expression .)
    )               reduce using rule 16 (expression -> expression - expression .)
    *               shift and go to state 28
    /               shift and go to state 29
    ^               shift and go to state 30

  ! *               [ reduce using rule 16 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 16 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]


state 37

    (17) expression -> expression * expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    +               reduce using rule 17 (expression -> expression * expression .)
    -               reduce using rule 17 (expression -> expression * expression .)
    *               reduce using rule 17 (expression -> expression * expression .)
    /               reduce using rule 17 (expression -> expression * expression .)
    ;               reduce using rule 17 (expression -> expression * expression .)
    )               reduce using rule 17 (expression -> expression * expression .)
    ^               shift and go to state 30

  ! ^               [ reduce using rule 17 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]


state 38

    (18) expression -> expression / expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    +               reduce using rule 18 (expression -> expression / expression .)
    -               reduce using rule 18 (expression -> expression / expression .)
    *               reduce using rule 18 (expression -> expression / expression .)
    /               reduce using rule 18 (expression -> expression / expression .)
    ;               reduce using rule 18 (expression -> expression / expression .)
    )               reduce using rule 18 (expression -> expression / expression .)
    ^               shift and go to state 30

  ! ^               [ reduce using rule 18 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]


state 39

    (19) expression -> expression ^ expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    +               reduce using rule 19 (expression -> expression ^ expression .)
    -               reduce using rule 19 (expression -> expression ^ expression .)
    *               reduce using rule 19 (expression -> expression ^ expression .)
    /               reduce using rule 19 (expression -> expression ^ expression .)
    ^               reduce using rule 19 (expression -> expression ^ expression .)
    ;               reduce using rule 19 (expression -> expression ^ expression .)
    )               reduce using rule 19 (expression -> expression ^ expression .)

  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]
  ! ^               [ shift and go to state 30 ]


state 40

    (21) expression -> ( expression ) .

    +               reduce using rule 21 (expression -> ( expression ) .)
    -               reduce using rule 21 (expression -> ( expression ) .)
    *               reduce using rule 21 (expression -> ( expression ) .)
    /               reduce using rule 21 (expression -> ( expression ) .)
    ^               reduce using rule 21 (expression -> ( expression ) .)
    ;               reduce using rule 21 (expression -> ( expression ) .)
    )               reduce using rule 21 (expression -> ( expression ) .)


state 41

    (13) declaration_full -> type NAME = expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression
    (19) expression -> expression . ^ expression

    ;               reduce using rule 13 (declaration_full -> type NAME = expression .)
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    ^               shift and go to state 30

