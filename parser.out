Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statement
Rule 2     statement -> declarations ; statement
Rule 3     statement -> print ; statement
Rule 4     statement -> if_statement statement
Rule 5     statement -> empty
Rule 6     empty -> <empty>
Rule 7     if_statement -> IF ( expression ) { statement }
Rule 8     type -> INT
Rule 9     type -> FLOAT
Rule 10    type -> BOOLEAN
Rule 11    declarations -> declaration_type_name
Rule 12    declarations -> declaration_assign_expression
Rule 13    declarations -> declaration_full
Rule 14    declaration_type_name -> type NAME
Rule 15    declaration_assign_expression -> NAME = expression
Rule 16    declaration_full -> type NAME = expression
Rule 17    print -> PRINT expression
Rule 18    expression -> expression + expression
Rule 19    expression -> expression - expression
Rule 20    expression -> expression * expression
Rule 21    expression -> expression / expression
Rule 22    expression -> expression ^ expression
Rule 23    expression -> expression EQUAL expression
Rule 24    expression -> expression NEQUAL expression
Rule 25    expression -> expression GEQUAL expression
Rule 26    expression -> expression LEQUAL expression
Rule 27    expression -> expression GREATER expression
Rule 28    expression -> expression LESS expression
Rule 29    expression -> - expression
Rule 30    expression -> ( expression )
Rule 31    expression -> INUM
Rule 32    expression -> FNUM
Rule 33    expression -> BOOLVAL
Rule 34    expression -> NAME
Rule 35    BOOLVAL -> TRUE
Rule 36    BOOLVAL -> FALSE

Terminals, with rules where they appear

(                    : 7 30
)                    : 7 30
*                    : 20
+                    : 18
-                    : 19 29
/                    : 21
;                    : 2 3
=                    : 15 16
BOOLEAN              : 10
EQUAL                : 23
FALSE                : 36
FLOAT                : 9
FNUM                 : 32
GEQUAL               : 25
GREATER              : 27
IF                   : 7
INT                  : 8
INUM                 : 31
LEQUAL               : 26
LESS                 : 28
NAME                 : 14 15 16 34
NEQUAL               : 24
PRINT                : 17
TRUE                 : 35
^                    : 22
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

BOOLVAL              : 33
declaration_assign_expression : 12
declaration_full     : 13
declaration_type_name : 11
declarations         : 2
empty                : 5
expression           : 7 15 16 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 30
if_statement         : 4
init                 : 0
print                : 3
statement            : 1 2 3 4 7
type                 : 14 16

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . if_statement statement
    (5) statement -> . empty
    (11) declarations -> . declaration_type_name
    (12) declarations -> . declaration_assign_expression
    (13) declarations -> . declaration_full
    (17) print -> . PRINT expression
    (7) if_statement -> . IF ( expression ) { statement }
    (6) empty -> .
    (14) declaration_type_name -> . type NAME
    (15) declaration_assign_expression -> . NAME = expression
    (16) declaration_full -> . type NAME = expression
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    $end            reduce using rule 6 (empty -> .)
    NAME            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16

    init                           shift and go to state 1
    statement                      shift and go to state 2
    declarations                   shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    empty                          shift and go to state 6
    declaration_type_name          shift and go to state 7
    declaration_assign_expression  shift and go to state 8
    declaration_full               shift and go to state 9
    type                           shift and go to state 12

state 1

    (0) S' -> init .



state 2

    (1) init -> statement .

    $end            reduce using rule 1 (init -> statement .)


state 3

    (2) statement -> declarations . ; statement

    ;               shift and go to state 17


state 4

    (3) statement -> print . ; statement

    ;               shift and go to state 18


state 5

    (4) statement -> if_statement . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . if_statement statement
    (5) statement -> . empty
    (11) declarations -> . declaration_type_name
    (12) declarations -> . declaration_assign_expression
    (13) declarations -> . declaration_full
    (17) print -> . PRINT expression
    (7) if_statement -> . IF ( expression ) { statement }
    (6) empty -> .
    (14) declaration_type_name -> . type NAME
    (15) declaration_assign_expression -> . NAME = expression
    (16) declaration_full -> . type NAME = expression
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    $end            reduce using rule 6 (empty -> .)
    }               reduce using rule 6 (empty -> .)
    NAME            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16

    if_statement                   shift and go to state 5
    statement                      shift and go to state 19
    declarations                   shift and go to state 3
    print                          shift and go to state 4
    empty                          shift and go to state 6
    declaration_type_name          shift and go to state 7
    declaration_assign_expression  shift and go to state 8
    declaration_full               shift and go to state 9
    type                           shift and go to state 12

state 6

    (5) statement -> empty .

    $end            reduce using rule 5 (statement -> empty .)
    }               reduce using rule 5 (statement -> empty .)


state 7

    (11) declarations -> declaration_type_name .

    ;               reduce using rule 11 (declarations -> declaration_type_name .)


state 8

    (12) declarations -> declaration_assign_expression .

    ;               reduce using rule 12 (declarations -> declaration_assign_expression .)


state 9

    (13) declarations -> declaration_full .

    ;               reduce using rule 13 (declarations -> declaration_full .)


state 10

    (17) print -> PRINT . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 20
    BOOLVAL                        shift and go to state 25

state 11

    (7) if_statement -> IF . ( expression ) { statement }

    (               shift and go to state 29


state 12

    (14) declaration_type_name -> type . NAME
    (16) declaration_full -> type . NAME = expression

    NAME            shift and go to state 30


state 13

    (15) declaration_assign_expression -> NAME . = expression

    =               shift and go to state 31


state 14

    (8) type -> INT .

    NAME            reduce using rule 8 (type -> INT .)


state 15

    (9) type -> FLOAT .

    NAME            reduce using rule 9 (type -> FLOAT .)


state 16

    (10) type -> BOOLEAN .

    NAME            reduce using rule 10 (type -> BOOLEAN .)


state 17

    (2) statement -> declarations ; . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . if_statement statement
    (5) statement -> . empty
    (11) declarations -> . declaration_type_name
    (12) declarations -> . declaration_assign_expression
    (13) declarations -> . declaration_full
    (17) print -> . PRINT expression
    (7) if_statement -> . IF ( expression ) { statement }
    (6) empty -> .
    (14) declaration_type_name -> . type NAME
    (15) declaration_assign_expression -> . NAME = expression
    (16) declaration_full -> . type NAME = expression
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    $end            reduce using rule 6 (empty -> .)
    }               reduce using rule 6 (empty -> .)
    NAME            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16

    declarations                   shift and go to state 3
    statement                      shift and go to state 32
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    empty                          shift and go to state 6
    declaration_type_name          shift and go to state 7
    declaration_assign_expression  shift and go to state 8
    declaration_full               shift and go to state 9
    type                           shift and go to state 12

state 18

    (3) statement -> print ; . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . if_statement statement
    (5) statement -> . empty
    (11) declarations -> . declaration_type_name
    (12) declarations -> . declaration_assign_expression
    (13) declarations -> . declaration_full
    (17) print -> . PRINT expression
    (7) if_statement -> . IF ( expression ) { statement }
    (6) empty -> .
    (14) declaration_type_name -> . type NAME
    (15) declaration_assign_expression -> . NAME = expression
    (16) declaration_full -> . type NAME = expression
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    $end            reduce using rule 6 (empty -> .)
    }               reduce using rule 6 (empty -> .)
    NAME            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16

    print                          shift and go to state 4
    statement                      shift and go to state 33
    declarations                   shift and go to state 3
    if_statement                   shift and go to state 5
    empty                          shift and go to state 6
    declaration_type_name          shift and go to state 7
    declaration_assign_expression  shift and go to state 8
    declaration_full               shift and go to state 9
    type                           shift and go to state 12

state 19

    (4) statement -> if_statement statement .

    $end            reduce using rule 4 (statement -> if_statement statement .)
    }               reduce using rule 4 (statement -> if_statement statement .)


state 20

    (17) print -> PRINT expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    ;               reduce using rule 17 (print -> PRINT expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38
    EQUAL           shift and go to state 39
    NEQUAL          shift and go to state 40
    GEQUAL          shift and go to state 41
    LEQUAL          shift and go to state 42
    GREATER         shift and go to state 43
    LESS            shift and go to state 44


state 21

    (29) expression -> - . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 45
    BOOLVAL                        shift and go to state 25

state 22

    (30) expression -> ( . expression )
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 46
    BOOLVAL                        shift and go to state 25

state 23

    (31) expression -> INUM .

    +               reduce using rule 31 (expression -> INUM .)
    -               reduce using rule 31 (expression -> INUM .)
    *               reduce using rule 31 (expression -> INUM .)
    /               reduce using rule 31 (expression -> INUM .)
    ^               reduce using rule 31 (expression -> INUM .)
    EQUAL           reduce using rule 31 (expression -> INUM .)
    NEQUAL          reduce using rule 31 (expression -> INUM .)
    GEQUAL          reduce using rule 31 (expression -> INUM .)
    LEQUAL          reduce using rule 31 (expression -> INUM .)
    GREATER         reduce using rule 31 (expression -> INUM .)
    LESS            reduce using rule 31 (expression -> INUM .)
    ;               reduce using rule 31 (expression -> INUM .)
    )               reduce using rule 31 (expression -> INUM .)


state 24

    (32) expression -> FNUM .

    +               reduce using rule 32 (expression -> FNUM .)
    -               reduce using rule 32 (expression -> FNUM .)
    *               reduce using rule 32 (expression -> FNUM .)
    /               reduce using rule 32 (expression -> FNUM .)
    ^               reduce using rule 32 (expression -> FNUM .)
    EQUAL           reduce using rule 32 (expression -> FNUM .)
    NEQUAL          reduce using rule 32 (expression -> FNUM .)
    GEQUAL          reduce using rule 32 (expression -> FNUM .)
    LEQUAL          reduce using rule 32 (expression -> FNUM .)
    GREATER         reduce using rule 32 (expression -> FNUM .)
    LESS            reduce using rule 32 (expression -> FNUM .)
    ;               reduce using rule 32 (expression -> FNUM .)
    )               reduce using rule 32 (expression -> FNUM .)


state 25

    (33) expression -> BOOLVAL .

    +               reduce using rule 33 (expression -> BOOLVAL .)
    -               reduce using rule 33 (expression -> BOOLVAL .)
    *               reduce using rule 33 (expression -> BOOLVAL .)
    /               reduce using rule 33 (expression -> BOOLVAL .)
    ^               reduce using rule 33 (expression -> BOOLVAL .)
    EQUAL           reduce using rule 33 (expression -> BOOLVAL .)
    NEQUAL          reduce using rule 33 (expression -> BOOLVAL .)
    GEQUAL          reduce using rule 33 (expression -> BOOLVAL .)
    LEQUAL          reduce using rule 33 (expression -> BOOLVAL .)
    GREATER         reduce using rule 33 (expression -> BOOLVAL .)
    LESS            reduce using rule 33 (expression -> BOOLVAL .)
    ;               reduce using rule 33 (expression -> BOOLVAL .)
    )               reduce using rule 33 (expression -> BOOLVAL .)


state 26

    (34) expression -> NAME .

    +               reduce using rule 34 (expression -> NAME .)
    -               reduce using rule 34 (expression -> NAME .)
    *               reduce using rule 34 (expression -> NAME .)
    /               reduce using rule 34 (expression -> NAME .)
    ^               reduce using rule 34 (expression -> NAME .)
    EQUAL           reduce using rule 34 (expression -> NAME .)
    NEQUAL          reduce using rule 34 (expression -> NAME .)
    GEQUAL          reduce using rule 34 (expression -> NAME .)
    LEQUAL          reduce using rule 34 (expression -> NAME .)
    GREATER         reduce using rule 34 (expression -> NAME .)
    LESS            reduce using rule 34 (expression -> NAME .)
    ;               reduce using rule 34 (expression -> NAME .)
    )               reduce using rule 34 (expression -> NAME .)


state 27

    (35) BOOLVAL -> TRUE .

    +               reduce using rule 35 (BOOLVAL -> TRUE .)
    -               reduce using rule 35 (BOOLVAL -> TRUE .)
    *               reduce using rule 35 (BOOLVAL -> TRUE .)
    /               reduce using rule 35 (BOOLVAL -> TRUE .)
    ^               reduce using rule 35 (BOOLVAL -> TRUE .)
    EQUAL           reduce using rule 35 (BOOLVAL -> TRUE .)
    NEQUAL          reduce using rule 35 (BOOLVAL -> TRUE .)
    GEQUAL          reduce using rule 35 (BOOLVAL -> TRUE .)
    LEQUAL          reduce using rule 35 (BOOLVAL -> TRUE .)
    GREATER         reduce using rule 35 (BOOLVAL -> TRUE .)
    LESS            reduce using rule 35 (BOOLVAL -> TRUE .)
    ;               reduce using rule 35 (BOOLVAL -> TRUE .)
    )               reduce using rule 35 (BOOLVAL -> TRUE .)


state 28

    (36) BOOLVAL -> FALSE .

    +               reduce using rule 36 (BOOLVAL -> FALSE .)
    -               reduce using rule 36 (BOOLVAL -> FALSE .)
    *               reduce using rule 36 (BOOLVAL -> FALSE .)
    /               reduce using rule 36 (BOOLVAL -> FALSE .)
    ^               reduce using rule 36 (BOOLVAL -> FALSE .)
    EQUAL           reduce using rule 36 (BOOLVAL -> FALSE .)
    NEQUAL          reduce using rule 36 (BOOLVAL -> FALSE .)
    GEQUAL          reduce using rule 36 (BOOLVAL -> FALSE .)
    LEQUAL          reduce using rule 36 (BOOLVAL -> FALSE .)
    GREATER         reduce using rule 36 (BOOLVAL -> FALSE .)
    LESS            reduce using rule 36 (BOOLVAL -> FALSE .)
    ;               reduce using rule 36 (BOOLVAL -> FALSE .)
    )               reduce using rule 36 (BOOLVAL -> FALSE .)


state 29

    (7) if_statement -> IF ( . expression ) { statement }
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 47
    BOOLVAL                        shift and go to state 25

state 30

    (14) declaration_type_name -> type NAME .
    (16) declaration_full -> type NAME . = expression

    ;               reduce using rule 14 (declaration_type_name -> type NAME .)
    =               shift and go to state 48


state 31

    (15) declaration_assign_expression -> NAME = . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 49
    BOOLVAL                        shift and go to state 25

state 32

    (2) statement -> declarations ; statement .

    $end            reduce using rule 2 (statement -> declarations ; statement .)
    }               reduce using rule 2 (statement -> declarations ; statement .)


state 33

    (3) statement -> print ; statement .

    $end            reduce using rule 3 (statement -> print ; statement .)
    }               reduce using rule 3 (statement -> print ; statement .)


state 34

    (18) expression -> expression + . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 50
    BOOLVAL                        shift and go to state 25

state 35

    (19) expression -> expression - . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 51
    BOOLVAL                        shift and go to state 25

state 36

    (20) expression -> expression * . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 52
    BOOLVAL                        shift and go to state 25

state 37

    (21) expression -> expression / . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 53
    BOOLVAL                        shift and go to state 25

state 38

    (22) expression -> expression ^ . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 54
    BOOLVAL                        shift and go to state 25

state 39

    (23) expression -> expression EQUAL . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 55
    BOOLVAL                        shift and go to state 25

state 40

    (24) expression -> expression NEQUAL . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 56
    BOOLVAL                        shift and go to state 25

state 41

    (25) expression -> expression GEQUAL . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 57
    BOOLVAL                        shift and go to state 25

state 42

    (26) expression -> expression LEQUAL . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 58
    BOOLVAL                        shift and go to state 25

state 43

    (27) expression -> expression GREATER . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 59
    BOOLVAL                        shift and go to state 25

state 44

    (28) expression -> expression LESS . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 60
    BOOLVAL                        shift and go to state 25

state 45

    (29) expression -> - expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    +               reduce using rule 29 (expression -> - expression .)
    -               reduce using rule 29 (expression -> - expression .)
    *               reduce using rule 29 (expression -> - expression .)
    /               reduce using rule 29 (expression -> - expression .)
    ^               reduce using rule 29 (expression -> - expression .)
    EQUAL           reduce using rule 29 (expression -> - expression .)
    NEQUAL          reduce using rule 29 (expression -> - expression .)
    GEQUAL          reduce using rule 29 (expression -> - expression .)
    LEQUAL          reduce using rule 29 (expression -> - expression .)
    GREATER         reduce using rule 29 (expression -> - expression .)
    LESS            reduce using rule 29 (expression -> - expression .)
    ;               reduce using rule 29 (expression -> - expression .)
    )               reduce using rule 29 (expression -> - expression .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! ^               [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 46

    (30) expression -> ( expression . )
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    )               shift and go to state 61
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38
    EQUAL           shift and go to state 39
    NEQUAL          shift and go to state 40
    GEQUAL          shift and go to state 41
    LEQUAL          shift and go to state 42
    GREATER         shift and go to state 43
    LESS            shift and go to state 44


state 47

    (7) if_statement -> IF ( expression . ) { statement }
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    )               shift and go to state 62
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38
    EQUAL           shift and go to state 39
    NEQUAL          shift and go to state 40
    GEQUAL          shift and go to state 41
    LEQUAL          shift and go to state 42
    GREATER         shift and go to state 43
    LESS            shift and go to state 44


state 48

    (16) declaration_full -> type NAME = . expression
    (18) expression -> . expression + expression
    (19) expression -> . expression - expression
    (20) expression -> . expression * expression
    (21) expression -> . expression / expression
    (22) expression -> . expression ^ expression
    (23) expression -> . expression EQUAL expression
    (24) expression -> . expression NEQUAL expression
    (25) expression -> . expression GEQUAL expression
    (26) expression -> . expression LEQUAL expression
    (27) expression -> . expression GREATER expression
    (28) expression -> . expression LESS expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUM
    (32) expression -> . FNUM
    (33) expression -> . BOOLVAL
    (34) expression -> . NAME
    (35) BOOLVAL -> . TRUE
    (36) BOOLVAL -> . FALSE

    -               shift and go to state 21
    (               shift and go to state 22
    INUM            shift and go to state 23
    FNUM            shift and go to state 24
    NAME            shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28

    expression                     shift and go to state 63
    BOOLVAL                        shift and go to state 25

state 49

    (15) declaration_assign_expression -> NAME = expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    ;               reduce using rule 15 (declaration_assign_expression -> NAME = expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38
    EQUAL           shift and go to state 39
    NEQUAL          shift and go to state 40
    GEQUAL          shift and go to state 41
    LEQUAL          shift and go to state 42
    GREATER         shift and go to state 43
    LESS            shift and go to state 44


state 50

    (18) expression -> expression + expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    +               reduce using rule 18 (expression -> expression + expression .)
    -               reduce using rule 18 (expression -> expression + expression .)
    EQUAL           reduce using rule 18 (expression -> expression + expression .)
    NEQUAL          reduce using rule 18 (expression -> expression + expression .)
    GEQUAL          reduce using rule 18 (expression -> expression + expression .)
    LEQUAL          reduce using rule 18 (expression -> expression + expression .)
    GREATER         reduce using rule 18 (expression -> expression + expression .)
    LESS            reduce using rule 18 (expression -> expression + expression .)
    ;               reduce using rule 18 (expression -> expression + expression .)
    )               reduce using rule 18 (expression -> expression + expression .)
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38

  ! *               [ reduce using rule 18 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 18 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 18 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 51

    (19) expression -> expression - expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    +               reduce using rule 19 (expression -> expression - expression .)
    -               reduce using rule 19 (expression -> expression - expression .)
    EQUAL           reduce using rule 19 (expression -> expression - expression .)
    NEQUAL          reduce using rule 19 (expression -> expression - expression .)
    GEQUAL          reduce using rule 19 (expression -> expression - expression .)
    LEQUAL          reduce using rule 19 (expression -> expression - expression .)
    GREATER         reduce using rule 19 (expression -> expression - expression .)
    LESS            reduce using rule 19 (expression -> expression - expression .)
    ;               reduce using rule 19 (expression -> expression - expression .)
    )               reduce using rule 19 (expression -> expression - expression .)
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38

  ! *               [ reduce using rule 19 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 19 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 19 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 52

    (20) expression -> expression * expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    +               reduce using rule 20 (expression -> expression * expression .)
    -               reduce using rule 20 (expression -> expression * expression .)
    *               reduce using rule 20 (expression -> expression * expression .)
    /               reduce using rule 20 (expression -> expression * expression .)
    EQUAL           reduce using rule 20 (expression -> expression * expression .)
    NEQUAL          reduce using rule 20 (expression -> expression * expression .)
    GEQUAL          reduce using rule 20 (expression -> expression * expression .)
    LEQUAL          reduce using rule 20 (expression -> expression * expression .)
    GREATER         reduce using rule 20 (expression -> expression * expression .)
    LESS            reduce using rule 20 (expression -> expression * expression .)
    ;               reduce using rule 20 (expression -> expression * expression .)
    )               reduce using rule 20 (expression -> expression * expression .)
    ^               shift and go to state 38

  ! ^               [ reduce using rule 20 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 53

    (21) expression -> expression / expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    +               reduce using rule 21 (expression -> expression / expression .)
    -               reduce using rule 21 (expression -> expression / expression .)
    *               reduce using rule 21 (expression -> expression / expression .)
    /               reduce using rule 21 (expression -> expression / expression .)
    EQUAL           reduce using rule 21 (expression -> expression / expression .)
    NEQUAL          reduce using rule 21 (expression -> expression / expression .)
    GEQUAL          reduce using rule 21 (expression -> expression / expression .)
    LEQUAL          reduce using rule 21 (expression -> expression / expression .)
    GREATER         reduce using rule 21 (expression -> expression / expression .)
    LESS            reduce using rule 21 (expression -> expression / expression .)
    ;               reduce using rule 21 (expression -> expression / expression .)
    )               reduce using rule 21 (expression -> expression / expression .)
    ^               shift and go to state 38

  ! ^               [ reduce using rule 21 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 54

    (22) expression -> expression ^ expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    +               reduce using rule 22 (expression -> expression ^ expression .)
    -               reduce using rule 22 (expression -> expression ^ expression .)
    *               reduce using rule 22 (expression -> expression ^ expression .)
    /               reduce using rule 22 (expression -> expression ^ expression .)
    ^               reduce using rule 22 (expression -> expression ^ expression .)
    EQUAL           reduce using rule 22 (expression -> expression ^ expression .)
    NEQUAL          reduce using rule 22 (expression -> expression ^ expression .)
    GEQUAL          reduce using rule 22 (expression -> expression ^ expression .)
    LEQUAL          reduce using rule 22 (expression -> expression ^ expression .)
    GREATER         reduce using rule 22 (expression -> expression ^ expression .)
    LESS            reduce using rule 22 (expression -> expression ^ expression .)
    ;               reduce using rule 22 (expression -> expression ^ expression .)
    )               reduce using rule 22 (expression -> expression ^ expression .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! ^               [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 55

    (23) expression -> expression EQUAL expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    EQUAL           reduce using rule 23 (expression -> expression EQUAL expression .)
    NEQUAL          reduce using rule 23 (expression -> expression EQUAL expression .)
    GEQUAL          reduce using rule 23 (expression -> expression EQUAL expression .)
    LEQUAL          reduce using rule 23 (expression -> expression EQUAL expression .)
    GREATER         reduce using rule 23 (expression -> expression EQUAL expression .)
    LESS            reduce using rule 23 (expression -> expression EQUAL expression .)
    ;               reduce using rule 23 (expression -> expression EQUAL expression .)
    )               reduce using rule 23 (expression -> expression EQUAL expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38

  ! +               [ reduce using rule 23 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 23 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 23 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 23 (expression -> expression EQUAL expression .) ]
  ! ^               [ reduce using rule 23 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 56

    (24) expression -> expression NEQUAL expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    EQUAL           reduce using rule 24 (expression -> expression NEQUAL expression .)
    NEQUAL          reduce using rule 24 (expression -> expression NEQUAL expression .)
    GEQUAL          reduce using rule 24 (expression -> expression NEQUAL expression .)
    LEQUAL          reduce using rule 24 (expression -> expression NEQUAL expression .)
    GREATER         reduce using rule 24 (expression -> expression NEQUAL expression .)
    LESS            reduce using rule 24 (expression -> expression NEQUAL expression .)
    ;               reduce using rule 24 (expression -> expression NEQUAL expression .)
    )               reduce using rule 24 (expression -> expression NEQUAL expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38

  ! +               [ reduce using rule 24 (expression -> expression NEQUAL expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression NEQUAL expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression NEQUAL expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression NEQUAL expression .) ]
  ! ^               [ reduce using rule 24 (expression -> expression NEQUAL expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 57

    (25) expression -> expression GEQUAL expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    EQUAL           reduce using rule 25 (expression -> expression GEQUAL expression .)
    NEQUAL          reduce using rule 25 (expression -> expression GEQUAL expression .)
    GEQUAL          reduce using rule 25 (expression -> expression GEQUAL expression .)
    LEQUAL          reduce using rule 25 (expression -> expression GEQUAL expression .)
    GREATER         reduce using rule 25 (expression -> expression GEQUAL expression .)
    LESS            reduce using rule 25 (expression -> expression GEQUAL expression .)
    ;               reduce using rule 25 (expression -> expression GEQUAL expression .)
    )               reduce using rule 25 (expression -> expression GEQUAL expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38

  ! +               [ reduce using rule 25 (expression -> expression GEQUAL expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression GEQUAL expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression GEQUAL expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression GEQUAL expression .) ]
  ! ^               [ reduce using rule 25 (expression -> expression GEQUAL expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 58

    (26) expression -> expression LEQUAL expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    EQUAL           reduce using rule 26 (expression -> expression LEQUAL expression .)
    NEQUAL          reduce using rule 26 (expression -> expression LEQUAL expression .)
    GEQUAL          reduce using rule 26 (expression -> expression LEQUAL expression .)
    LEQUAL          reduce using rule 26 (expression -> expression LEQUAL expression .)
    GREATER         reduce using rule 26 (expression -> expression LEQUAL expression .)
    LESS            reduce using rule 26 (expression -> expression LEQUAL expression .)
    ;               reduce using rule 26 (expression -> expression LEQUAL expression .)
    )               reduce using rule 26 (expression -> expression LEQUAL expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38

  ! +               [ reduce using rule 26 (expression -> expression LEQUAL expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression LEQUAL expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression LEQUAL expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression LEQUAL expression .) ]
  ! ^               [ reduce using rule 26 (expression -> expression LEQUAL expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 59

    (27) expression -> expression GREATER expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    EQUAL           reduce using rule 27 (expression -> expression GREATER expression .)
    NEQUAL          reduce using rule 27 (expression -> expression GREATER expression .)
    GEQUAL          reduce using rule 27 (expression -> expression GREATER expression .)
    LEQUAL          reduce using rule 27 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 27 (expression -> expression GREATER expression .)
    LESS            reduce using rule 27 (expression -> expression GREATER expression .)
    ;               reduce using rule 27 (expression -> expression GREATER expression .)
    )               reduce using rule 27 (expression -> expression GREATER expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38

  ! +               [ reduce using rule 27 (expression -> expression GREATER expression .) ]
  ! -               [ reduce using rule 27 (expression -> expression GREATER expression .) ]
  ! *               [ reduce using rule 27 (expression -> expression GREATER expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression GREATER expression .) ]
  ! ^               [ reduce using rule 27 (expression -> expression GREATER expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 60

    (28) expression -> expression LESS expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    EQUAL           reduce using rule 28 (expression -> expression LESS expression .)
    NEQUAL          reduce using rule 28 (expression -> expression LESS expression .)
    GEQUAL          reduce using rule 28 (expression -> expression LESS expression .)
    LEQUAL          reduce using rule 28 (expression -> expression LESS expression .)
    GREATER         reduce using rule 28 (expression -> expression LESS expression .)
    LESS            reduce using rule 28 (expression -> expression LESS expression .)
    ;               reduce using rule 28 (expression -> expression LESS expression .)
    )               reduce using rule 28 (expression -> expression LESS expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38

  ! +               [ reduce using rule 28 (expression -> expression LESS expression .) ]
  ! -               [ reduce using rule 28 (expression -> expression LESS expression .) ]
  ! *               [ reduce using rule 28 (expression -> expression LESS expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression LESS expression .) ]
  ! ^               [ reduce using rule 28 (expression -> expression LESS expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! NEQUAL          [ shift and go to state 40 ]
  ! GEQUAL          [ shift and go to state 41 ]
  ! LEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 43 ]
  ! LESS            [ shift and go to state 44 ]


state 61

    (30) expression -> ( expression ) .

    +               reduce using rule 30 (expression -> ( expression ) .)
    -               reduce using rule 30 (expression -> ( expression ) .)
    *               reduce using rule 30 (expression -> ( expression ) .)
    /               reduce using rule 30 (expression -> ( expression ) .)
    ^               reduce using rule 30 (expression -> ( expression ) .)
    EQUAL           reduce using rule 30 (expression -> ( expression ) .)
    NEQUAL          reduce using rule 30 (expression -> ( expression ) .)
    GEQUAL          reduce using rule 30 (expression -> ( expression ) .)
    LEQUAL          reduce using rule 30 (expression -> ( expression ) .)
    GREATER         reduce using rule 30 (expression -> ( expression ) .)
    LESS            reduce using rule 30 (expression -> ( expression ) .)
    ;               reduce using rule 30 (expression -> ( expression ) .)
    )               reduce using rule 30 (expression -> ( expression ) .)


state 62

    (7) if_statement -> IF ( expression ) . { statement }

    {               shift and go to state 64


state 63

    (16) declaration_full -> type NAME = expression .
    (18) expression -> expression . + expression
    (19) expression -> expression . - expression
    (20) expression -> expression . * expression
    (21) expression -> expression . / expression
    (22) expression -> expression . ^ expression
    (23) expression -> expression . EQUAL expression
    (24) expression -> expression . NEQUAL expression
    (25) expression -> expression . GEQUAL expression
    (26) expression -> expression . LEQUAL expression
    (27) expression -> expression . GREATER expression
    (28) expression -> expression . LESS expression

    ;               reduce using rule 16 (declaration_full -> type NAME = expression .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    ^               shift and go to state 38
    EQUAL           shift and go to state 39
    NEQUAL          shift and go to state 40
    GEQUAL          shift and go to state 41
    LEQUAL          shift and go to state 42
    GREATER         shift and go to state 43
    LESS            shift and go to state 44


state 64

    (7) if_statement -> IF ( expression ) { . statement }
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . if_statement statement
    (5) statement -> . empty
    (11) declarations -> . declaration_type_name
    (12) declarations -> . declaration_assign_expression
    (13) declarations -> . declaration_full
    (17) print -> . PRINT expression
    (7) if_statement -> . IF ( expression ) { statement }
    (6) empty -> .
    (14) declaration_type_name -> . type NAME
    (15) declaration_assign_expression -> . NAME = expression
    (16) declaration_full -> . type NAME = expression
    (8) type -> . INT
    (9) type -> . FLOAT
    (10) type -> . BOOLEAN

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    }               reduce using rule 6 (empty -> .)
    NAME            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16

    statement                      shift and go to state 65
    declarations                   shift and go to state 3
    print                          shift and go to state 4
    if_statement                   shift and go to state 5
    empty                          shift and go to state 6
    declaration_type_name          shift and go to state 7
    declaration_assign_expression  shift and go to state 8
    declaration_full               shift and go to state 9
    type                           shift and go to state 12

state 65

    (7) if_statement -> IF ( expression ) { statement . }

    }               shift and go to state 66


state 66

    (7) if_statement -> IF ( expression ) { statement } .

    PRINT           reduce using rule 7 (if_statement -> IF ( expression ) { statement } .)
    IF              reduce using rule 7 (if_statement -> IF ( expression ) { statement } .)
    NAME            reduce using rule 7 (if_statement -> IF ( expression ) { statement } .)
    INT             reduce using rule 7 (if_statement -> IF ( expression ) { statement } .)
    FLOAT           reduce using rule 7 (if_statement -> IF ( expression ) { statement } .)
    BOOLEAN         reduce using rule 7 (if_statement -> IF ( expression ) { statement } .)
    $end            reduce using rule 7 (if_statement -> IF ( expression ) { statement } .)
    }               reduce using rule 7 (if_statement -> IF ( expression ) { statement } .)

