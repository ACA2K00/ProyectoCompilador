Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statement
Rule 2     statement -> declarations statement
Rule 3     statement -> print statement
Rule 4     statement -> empty
Rule 5     empty -> <empty>
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     declarations -> declaration_type_name
Rule 9     declarations -> declaration_assign_expression
Rule 10    declarations -> declaration_full
Rule 11    declaration_type_name -> type NAME
Rule 12    declaration_assign_expression -> NAME = expression
Rule 13    declaration_full -> type NAME = expression
Rule 14    print -> PRINT expression
Rule 15    expression -> expression + expression
Rule 16    expression -> expression - expression
Rule 17    expression -> expression * expression
Rule 18    expression -> expression / expression
Rule 19    expression -> - expression
Rule 20    expression -> ( expression )
Rule 21    expression -> INUM
Rule 22    expression -> FNUM
Rule 23    expression -> NAME

Terminals, with rules where they appear

(                    : 20
)                    : 20
*                    : 17
+                    : 15
-                    : 16 19
/                    : 18
=                    : 12 13
FLOAT                : 7
FNUM                 : 22
INT                  : 6
INUM                 : 21
NAME                 : 11 12 13 23
PRINT                : 14
error                : 

Nonterminals, with rules where they appear

declaration_assign_expression : 9
declaration_full     : 10
declaration_type_name : 8
declarations         : 2
empty                : 4
expression           : 12 13 14 15 15 16 16 17 17 18 18 19 20
init                 : 0
print                : 3
statement            : 1 2 3
type                 : 11 13

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statement
    (2) statement -> . declarations statement
    (3) statement -> . print statement
    (4) statement -> . empty
    (8) declarations -> . declaration_type_name
    (9) declarations -> . declaration_assign_expression
    (10) declarations -> . declaration_full
    (14) print -> . PRINT expression
    (5) empty -> .
    (11) declaration_type_name -> . type NAME
    (12) declaration_assign_expression -> . NAME = expression
    (13) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    init                           shift and go to state 1
    statement                      shift and go to state 2
    declarations                   shift and go to state 3
    print                          shift and go to state 4
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 1

    (0) S' -> init .



state 2

    (1) init -> statement .

    $end            reduce using rule 1 (init -> statement .)


state 3

    (2) statement -> declarations . statement
    (2) statement -> . declarations statement
    (3) statement -> . print statement
    (4) statement -> . empty
    (8) declarations -> . declaration_type_name
    (9) declarations -> . declaration_assign_expression
    (10) declarations -> . declaration_full
    (14) print -> . PRINT expression
    (5) empty -> .
    (11) declaration_type_name -> . type NAME
    (12) declaration_assign_expression -> . NAME = expression
    (13) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    declarations                   shift and go to state 3
    statement                      shift and go to state 14
    print                          shift and go to state 4
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 4

    (3) statement -> print . statement
    (2) statement -> . declarations statement
    (3) statement -> . print statement
    (4) statement -> . empty
    (8) declarations -> . declaration_type_name
    (9) declarations -> . declaration_assign_expression
    (10) declarations -> . declaration_full
    (14) print -> . PRINT expression
    (5) empty -> .
    (11) declaration_type_name -> . type NAME
    (12) declaration_assign_expression -> . NAME = expression
    (13) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13

    print                          shift and go to state 4
    statement                      shift and go to state 15
    declarations                   shift and go to state 3
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 5

    (4) statement -> empty .

    $end            reduce using rule 4 (statement -> empty .)


state 6

    (8) declarations -> declaration_type_name .

    PRINT           reduce using rule 8 (declarations -> declaration_type_name .)
    NAME            reduce using rule 8 (declarations -> declaration_type_name .)
    INT             reduce using rule 8 (declarations -> declaration_type_name .)
    FLOAT           reduce using rule 8 (declarations -> declaration_type_name .)
    $end            reduce using rule 8 (declarations -> declaration_type_name .)


state 7

    (9) declarations -> declaration_assign_expression .

    PRINT           reduce using rule 9 (declarations -> declaration_assign_expression .)
    NAME            reduce using rule 9 (declarations -> declaration_assign_expression .)
    INT             reduce using rule 9 (declarations -> declaration_assign_expression .)
    FLOAT           reduce using rule 9 (declarations -> declaration_assign_expression .)
    $end            reduce using rule 9 (declarations -> declaration_assign_expression .)


state 8

    (10) declarations -> declaration_full .

    PRINT           reduce using rule 10 (declarations -> declaration_full .)
    NAME            reduce using rule 10 (declarations -> declaration_full .)
    INT             reduce using rule 10 (declarations -> declaration_full .)
    FLOAT           reduce using rule 10 (declarations -> declaration_full .)
    $end            reduce using rule 10 (declarations -> declaration_full .)


state 9

    (14) print -> PRINT . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 16

state 10

    (11) declaration_type_name -> type . NAME
    (13) declaration_full -> type . NAME = expression

    NAME            shift and go to state 22


state 11

    (12) declaration_assign_expression -> NAME . = expression

    =               shift and go to state 23


state 12

    (6) type -> INT .

    NAME            reduce using rule 6 (type -> INT .)


state 13

    (7) type -> FLOAT .

    NAME            reduce using rule 7 (type -> FLOAT .)


state 14

    (2) statement -> declarations statement .

    $end            reduce using rule 2 (statement -> declarations statement .)


state 15

    (3) statement -> print statement .

    $end            reduce using rule 3 (statement -> print statement .)


state 16

    (14) print -> PRINT expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    PRINT           reduce using rule 14 (print -> PRINT expression .)
    NAME            reduce using rule 14 (print -> PRINT expression .)
    INT             reduce using rule 14 (print -> PRINT expression .)
    FLOAT           reduce using rule 14 (print -> PRINT expression .)
    $end            reduce using rule 14 (print -> PRINT expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27


state 17

    (19) expression -> - . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 28

state 18

    (20) expression -> ( . expression )
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 29

state 19

    (21) expression -> INUM .

    +               reduce using rule 21 (expression -> INUM .)
    -               reduce using rule 21 (expression -> INUM .)
    *               reduce using rule 21 (expression -> INUM .)
    /               reduce using rule 21 (expression -> INUM .)
    PRINT           reduce using rule 21 (expression -> INUM .)
    NAME            reduce using rule 21 (expression -> INUM .)
    INT             reduce using rule 21 (expression -> INUM .)
    FLOAT           reduce using rule 21 (expression -> INUM .)
    $end            reduce using rule 21 (expression -> INUM .)
    )               reduce using rule 21 (expression -> INUM .)


state 20

    (22) expression -> FNUM .

    +               reduce using rule 22 (expression -> FNUM .)
    -               reduce using rule 22 (expression -> FNUM .)
    *               reduce using rule 22 (expression -> FNUM .)
    /               reduce using rule 22 (expression -> FNUM .)
    PRINT           reduce using rule 22 (expression -> FNUM .)
    NAME            reduce using rule 22 (expression -> FNUM .)
    INT             reduce using rule 22 (expression -> FNUM .)
    FLOAT           reduce using rule 22 (expression -> FNUM .)
    $end            reduce using rule 22 (expression -> FNUM .)
    )               reduce using rule 22 (expression -> FNUM .)


state 21

    (23) expression -> NAME .

    +               reduce using rule 23 (expression -> NAME .)
    -               reduce using rule 23 (expression -> NAME .)
    *               reduce using rule 23 (expression -> NAME .)
    /               reduce using rule 23 (expression -> NAME .)
    PRINT           reduce using rule 23 (expression -> NAME .)
    NAME            reduce using rule 23 (expression -> NAME .)
    INT             reduce using rule 23 (expression -> NAME .)
    FLOAT           reduce using rule 23 (expression -> NAME .)
    $end            reduce using rule 23 (expression -> NAME .)
    )               reduce using rule 23 (expression -> NAME .)


state 22

    (11) declaration_type_name -> type NAME .
    (13) declaration_full -> type NAME . = expression

    PRINT           reduce using rule 11 (declaration_type_name -> type NAME .)
    NAME            reduce using rule 11 (declaration_type_name -> type NAME .)
    INT             reduce using rule 11 (declaration_type_name -> type NAME .)
    FLOAT           reduce using rule 11 (declaration_type_name -> type NAME .)
    $end            reduce using rule 11 (declaration_type_name -> type NAME .)
    =               shift and go to state 30


state 23

    (12) declaration_assign_expression -> NAME = . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 31

state 24

    (15) expression -> expression + . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 32

state 25

    (16) expression -> expression - . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 33

state 26

    (17) expression -> expression * . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 34

state 27

    (18) expression -> expression / . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 35

state 28

    (19) expression -> - expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    +               reduce using rule 19 (expression -> - expression .)
    -               reduce using rule 19 (expression -> - expression .)
    *               reduce using rule 19 (expression -> - expression .)
    /               reduce using rule 19 (expression -> - expression .)
    PRINT           reduce using rule 19 (expression -> - expression .)
    NAME            reduce using rule 19 (expression -> - expression .)
    INT             reduce using rule 19 (expression -> - expression .)
    FLOAT           reduce using rule 19 (expression -> - expression .)
    $end            reduce using rule 19 (expression -> - expression .)
    )               reduce using rule 19 (expression -> - expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]


state 29

    (20) expression -> ( expression . )
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    )               shift and go to state 36
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27


state 30

    (13) declaration_full -> type NAME = . expression
    (15) expression -> . expression + expression
    (16) expression -> . expression - expression
    (17) expression -> . expression * expression
    (18) expression -> . expression / expression
    (19) expression -> . - expression
    (20) expression -> . ( expression )
    (21) expression -> . INUM
    (22) expression -> . FNUM
    (23) expression -> . NAME

    -               shift and go to state 17
    (               shift and go to state 18
    INUM            shift and go to state 19
    FNUM            shift and go to state 20
    NAME            shift and go to state 21

    expression                     shift and go to state 37

state 31

    (12) declaration_assign_expression -> NAME = expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    PRINT           reduce using rule 12 (declaration_assign_expression -> NAME = expression .)
    NAME            reduce using rule 12 (declaration_assign_expression -> NAME = expression .)
    INT             reduce using rule 12 (declaration_assign_expression -> NAME = expression .)
    FLOAT           reduce using rule 12 (declaration_assign_expression -> NAME = expression .)
    $end            reduce using rule 12 (declaration_assign_expression -> NAME = expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27


state 32

    (15) expression -> expression + expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    +               reduce using rule 15 (expression -> expression + expression .)
    -               reduce using rule 15 (expression -> expression + expression .)
    PRINT           reduce using rule 15 (expression -> expression + expression .)
    NAME            reduce using rule 15 (expression -> expression + expression .)
    INT             reduce using rule 15 (expression -> expression + expression .)
    FLOAT           reduce using rule 15 (expression -> expression + expression .)
    $end            reduce using rule 15 (expression -> expression + expression .)
    )               reduce using rule 15 (expression -> expression + expression .)
    *               shift and go to state 26
    /               shift and go to state 27

  ! *               [ reduce using rule 15 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 15 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]


state 33

    (16) expression -> expression - expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    +               reduce using rule 16 (expression -> expression - expression .)
    -               reduce using rule 16 (expression -> expression - expression .)
    PRINT           reduce using rule 16 (expression -> expression - expression .)
    NAME            reduce using rule 16 (expression -> expression - expression .)
    INT             reduce using rule 16 (expression -> expression - expression .)
    FLOAT           reduce using rule 16 (expression -> expression - expression .)
    $end            reduce using rule 16 (expression -> expression - expression .)
    )               reduce using rule 16 (expression -> expression - expression .)
    *               shift and go to state 26
    /               shift and go to state 27

  ! *               [ reduce using rule 16 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]


state 34

    (17) expression -> expression * expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    +               reduce using rule 17 (expression -> expression * expression .)
    -               reduce using rule 17 (expression -> expression * expression .)
    *               reduce using rule 17 (expression -> expression * expression .)
    /               reduce using rule 17 (expression -> expression * expression .)
    PRINT           reduce using rule 17 (expression -> expression * expression .)
    NAME            reduce using rule 17 (expression -> expression * expression .)
    INT             reduce using rule 17 (expression -> expression * expression .)
    FLOAT           reduce using rule 17 (expression -> expression * expression .)
    $end            reduce using rule 17 (expression -> expression * expression .)
    )               reduce using rule 17 (expression -> expression * expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]


state 35

    (18) expression -> expression / expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    +               reduce using rule 18 (expression -> expression / expression .)
    -               reduce using rule 18 (expression -> expression / expression .)
    *               reduce using rule 18 (expression -> expression / expression .)
    /               reduce using rule 18 (expression -> expression / expression .)
    PRINT           reduce using rule 18 (expression -> expression / expression .)
    NAME            reduce using rule 18 (expression -> expression / expression .)
    INT             reduce using rule 18 (expression -> expression / expression .)
    FLOAT           reduce using rule 18 (expression -> expression / expression .)
    $end            reduce using rule 18 (expression -> expression / expression .)
    )               reduce using rule 18 (expression -> expression / expression .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]


state 36

    (20) expression -> ( expression ) .

    +               reduce using rule 20 (expression -> ( expression ) .)
    -               reduce using rule 20 (expression -> ( expression ) .)
    *               reduce using rule 20 (expression -> ( expression ) .)
    /               reduce using rule 20 (expression -> ( expression ) .)
    PRINT           reduce using rule 20 (expression -> ( expression ) .)
    NAME            reduce using rule 20 (expression -> ( expression ) .)
    INT             reduce using rule 20 (expression -> ( expression ) .)
    FLOAT           reduce using rule 20 (expression -> ( expression ) .)
    $end            reduce using rule 20 (expression -> ( expression ) .)
    )               reduce using rule 20 (expression -> ( expression ) .)


state 37

    (13) declaration_full -> type NAME = expression .
    (15) expression -> expression . + expression
    (16) expression -> expression . - expression
    (17) expression -> expression . * expression
    (18) expression -> expression . / expression

    PRINT           reduce using rule 13 (declaration_full -> type NAME = expression .)
    NAME            reduce using rule 13 (declaration_full -> type NAME = expression .)
    INT             reduce using rule 13 (declaration_full -> type NAME = expression .)
    FLOAT           reduce using rule 13 (declaration_full -> type NAME = expression .)
    $end            reduce using rule 13 (declaration_full -> type NAME = expression .)
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27

