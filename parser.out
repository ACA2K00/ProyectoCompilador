Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statement
Rule 2     statement -> declarations ; statement
Rule 3     statement -> print ; statement
Rule 4     statement -> empty
Rule 5     empty -> <empty>
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> BOOLEAN
Rule 9     declarations -> declaration_type_name
Rule 10    declarations -> declaration_assign_expression
Rule 11    declarations -> declaration_full
Rule 12    declaration_type_name -> type NAME
Rule 13    declaration_assign_expression -> NAME = expression
Rule 14    declaration_full -> type NAME = expression
Rule 15    print -> PRINT expression
Rule 16    expression -> expression + expression
Rule 17    expression -> expression - expression
Rule 18    expression -> expression * expression
Rule 19    expression -> expression / expression
Rule 20    expression -> expression ^ expression
Rule 21    expression -> expression EQUAL expression
Rule 22    expression -> expression NEQUAL expression
Rule 23    expression -> expression GEQUAL expression
Rule 24    expression -> expression LEQUAL expression
Rule 25    expression -> expression GREATER expression
Rule 26    expression -> expression LESS expression
Rule 27    expression -> - expression
Rule 28    expression -> ( expression )
Rule 29    expression -> INUM
Rule 30    expression -> FNUM
Rule 31    expression -> BOOLVAL
Rule 32    expression -> NAME
Rule 33    BOOLVAL -> TRUE
Rule 34    BOOLVAL -> FALSE

Terminals, with rules where they appear

(                    : 28
)                    : 28
*                    : 18
+                    : 16
-                    : 17 27
/                    : 19
;                    : 2 3
=                    : 13 14
BOOLEAN              : 8
EQUAL                : 21
FALSE                : 34
FLOAT                : 7
FNUM                 : 30
GEQUAL               : 23
GREATER              : 25
INT                  : 6
INUM                 : 29
LEQUAL               : 24
LESS                 : 26
NAME                 : 12 13 14 32
NEQUAL               : 22
PRINT                : 15
TRUE                 : 33
^                    : 20
error                : 

Nonterminals, with rules where they appear

BOOLVAL              : 31
declaration_assign_expression : 10
declaration_full     : 11
declaration_type_name : 9
declarations         : 2
empty                : 4
expression           : 13 14 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 28
init                 : 0
print                : 3
statement            : 1 2 3
type                 : 12 14

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (9) declarations -> . declaration_type_name
    (10) declarations -> . declaration_assign_expression
    (11) declarations -> . declaration_full
    (15) print -> . PRINT expression
    (5) empty -> .
    (12) declaration_type_name -> . type NAME
    (13) declaration_assign_expression -> . NAME = expression
    (14) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    BOOLEAN         shift and go to state 14

    init                           shift and go to state 1
    statement                      shift and go to state 2
    declarations                   shift and go to state 3
    print                          shift and go to state 4
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 1

    (0) S' -> init .



state 2

    (1) init -> statement .

    $end            reduce using rule 1 (init -> statement .)


state 3

    (2) statement -> declarations . ; statement

    ;               shift and go to state 15


state 4

    (3) statement -> print . ; statement

    ;               shift and go to state 16


state 5

    (4) statement -> empty .

    $end            reduce using rule 4 (statement -> empty .)


state 6

    (9) declarations -> declaration_type_name .

    ;               reduce using rule 9 (declarations -> declaration_type_name .)


state 7

    (10) declarations -> declaration_assign_expression .

    ;               reduce using rule 10 (declarations -> declaration_assign_expression .)


state 8

    (11) declarations -> declaration_full .

    ;               reduce using rule 11 (declarations -> declaration_full .)


state 9

    (15) print -> PRINT . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 17
    BOOLVAL                        shift and go to state 22

state 10

    (12) declaration_type_name -> type . NAME
    (14) declaration_full -> type . NAME = expression

    NAME            shift and go to state 26


state 11

    (13) declaration_assign_expression -> NAME . = expression

    =               shift and go to state 27


state 12

    (6) type -> INT .

    NAME            reduce using rule 6 (type -> INT .)


state 13

    (7) type -> FLOAT .

    NAME            reduce using rule 7 (type -> FLOAT .)


state 14

    (8) type -> BOOLEAN .

    NAME            reduce using rule 8 (type -> BOOLEAN .)


state 15

    (2) statement -> declarations ; . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (9) declarations -> . declaration_type_name
    (10) declarations -> . declaration_assign_expression
    (11) declarations -> . declaration_full
    (15) print -> . PRINT expression
    (5) empty -> .
    (12) declaration_type_name -> . type NAME
    (13) declaration_assign_expression -> . NAME = expression
    (14) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    BOOLEAN         shift and go to state 14

    declarations                   shift and go to state 3
    statement                      shift and go to state 28
    print                          shift and go to state 4
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 16

    (3) statement -> print ; . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (9) declarations -> . declaration_type_name
    (10) declarations -> . declaration_assign_expression
    (11) declarations -> . declaration_full
    (15) print -> . PRINT expression
    (5) empty -> .
    (12) declaration_type_name -> . type NAME
    (13) declaration_assign_expression -> . NAME = expression
    (14) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    BOOLEAN         shift and go to state 14

    print                          shift and go to state 4
    statement                      shift and go to state 29
    declarations                   shift and go to state 3
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 17

    (15) print -> PRINT expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    ;               reduce using rule 15 (print -> PRINT expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NEQUAL          shift and go to state 36
    GEQUAL          shift and go to state 37
    LEQUAL          shift and go to state 38
    GREATER         shift and go to state 39
    LESS            shift and go to state 40


state 18

    (27) expression -> - . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 41
    BOOLVAL                        shift and go to state 22

state 19

    (28) expression -> ( . expression )
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 42
    BOOLVAL                        shift and go to state 22

state 20

    (29) expression -> INUM .

    +               reduce using rule 29 (expression -> INUM .)
    -               reduce using rule 29 (expression -> INUM .)
    *               reduce using rule 29 (expression -> INUM .)
    /               reduce using rule 29 (expression -> INUM .)
    ^               reduce using rule 29 (expression -> INUM .)
    EQUAL           reduce using rule 29 (expression -> INUM .)
    NEQUAL          reduce using rule 29 (expression -> INUM .)
    GEQUAL          reduce using rule 29 (expression -> INUM .)
    LEQUAL          reduce using rule 29 (expression -> INUM .)
    GREATER         reduce using rule 29 (expression -> INUM .)
    LESS            reduce using rule 29 (expression -> INUM .)
    ;               reduce using rule 29 (expression -> INUM .)
    )               reduce using rule 29 (expression -> INUM .)


state 21

    (30) expression -> FNUM .

    +               reduce using rule 30 (expression -> FNUM .)
    -               reduce using rule 30 (expression -> FNUM .)
    *               reduce using rule 30 (expression -> FNUM .)
    /               reduce using rule 30 (expression -> FNUM .)
    ^               reduce using rule 30 (expression -> FNUM .)
    EQUAL           reduce using rule 30 (expression -> FNUM .)
    NEQUAL          reduce using rule 30 (expression -> FNUM .)
    GEQUAL          reduce using rule 30 (expression -> FNUM .)
    LEQUAL          reduce using rule 30 (expression -> FNUM .)
    GREATER         reduce using rule 30 (expression -> FNUM .)
    LESS            reduce using rule 30 (expression -> FNUM .)
    ;               reduce using rule 30 (expression -> FNUM .)
    )               reduce using rule 30 (expression -> FNUM .)


state 22

    (31) expression -> BOOLVAL .

    +               reduce using rule 31 (expression -> BOOLVAL .)
    -               reduce using rule 31 (expression -> BOOLVAL .)
    *               reduce using rule 31 (expression -> BOOLVAL .)
    /               reduce using rule 31 (expression -> BOOLVAL .)
    ^               reduce using rule 31 (expression -> BOOLVAL .)
    EQUAL           reduce using rule 31 (expression -> BOOLVAL .)
    NEQUAL          reduce using rule 31 (expression -> BOOLVAL .)
    GEQUAL          reduce using rule 31 (expression -> BOOLVAL .)
    LEQUAL          reduce using rule 31 (expression -> BOOLVAL .)
    GREATER         reduce using rule 31 (expression -> BOOLVAL .)
    LESS            reduce using rule 31 (expression -> BOOLVAL .)
    ;               reduce using rule 31 (expression -> BOOLVAL .)
    )               reduce using rule 31 (expression -> BOOLVAL .)


state 23

    (32) expression -> NAME .

    +               reduce using rule 32 (expression -> NAME .)
    -               reduce using rule 32 (expression -> NAME .)
    *               reduce using rule 32 (expression -> NAME .)
    /               reduce using rule 32 (expression -> NAME .)
    ^               reduce using rule 32 (expression -> NAME .)
    EQUAL           reduce using rule 32 (expression -> NAME .)
    NEQUAL          reduce using rule 32 (expression -> NAME .)
    GEQUAL          reduce using rule 32 (expression -> NAME .)
    LEQUAL          reduce using rule 32 (expression -> NAME .)
    GREATER         reduce using rule 32 (expression -> NAME .)
    LESS            reduce using rule 32 (expression -> NAME .)
    ;               reduce using rule 32 (expression -> NAME .)
    )               reduce using rule 32 (expression -> NAME .)


state 24

    (33) BOOLVAL -> TRUE .

    +               reduce using rule 33 (BOOLVAL -> TRUE .)
    -               reduce using rule 33 (BOOLVAL -> TRUE .)
    *               reduce using rule 33 (BOOLVAL -> TRUE .)
    /               reduce using rule 33 (BOOLVAL -> TRUE .)
    ^               reduce using rule 33 (BOOLVAL -> TRUE .)
    EQUAL           reduce using rule 33 (BOOLVAL -> TRUE .)
    NEQUAL          reduce using rule 33 (BOOLVAL -> TRUE .)
    GEQUAL          reduce using rule 33 (BOOLVAL -> TRUE .)
    LEQUAL          reduce using rule 33 (BOOLVAL -> TRUE .)
    GREATER         reduce using rule 33 (BOOLVAL -> TRUE .)
    LESS            reduce using rule 33 (BOOLVAL -> TRUE .)
    ;               reduce using rule 33 (BOOLVAL -> TRUE .)
    )               reduce using rule 33 (BOOLVAL -> TRUE .)


state 25

    (34) BOOLVAL -> FALSE .

    +               reduce using rule 34 (BOOLVAL -> FALSE .)
    -               reduce using rule 34 (BOOLVAL -> FALSE .)
    *               reduce using rule 34 (BOOLVAL -> FALSE .)
    /               reduce using rule 34 (BOOLVAL -> FALSE .)
    ^               reduce using rule 34 (BOOLVAL -> FALSE .)
    EQUAL           reduce using rule 34 (BOOLVAL -> FALSE .)
    NEQUAL          reduce using rule 34 (BOOLVAL -> FALSE .)
    GEQUAL          reduce using rule 34 (BOOLVAL -> FALSE .)
    LEQUAL          reduce using rule 34 (BOOLVAL -> FALSE .)
    GREATER         reduce using rule 34 (BOOLVAL -> FALSE .)
    LESS            reduce using rule 34 (BOOLVAL -> FALSE .)
    ;               reduce using rule 34 (BOOLVAL -> FALSE .)
    )               reduce using rule 34 (BOOLVAL -> FALSE .)


state 26

    (12) declaration_type_name -> type NAME .
    (14) declaration_full -> type NAME . = expression

    ;               reduce using rule 12 (declaration_type_name -> type NAME .)
    =               shift and go to state 43


state 27

    (13) declaration_assign_expression -> NAME = . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 44
    BOOLVAL                        shift and go to state 22

state 28

    (2) statement -> declarations ; statement .

    $end            reduce using rule 2 (statement -> declarations ; statement .)


state 29

    (3) statement -> print ; statement .

    $end            reduce using rule 3 (statement -> print ; statement .)


state 30

    (16) expression -> expression + . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 45
    BOOLVAL                        shift and go to state 22

state 31

    (17) expression -> expression - . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 46
    BOOLVAL                        shift and go to state 22

state 32

    (18) expression -> expression * . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 47
    BOOLVAL                        shift and go to state 22

state 33

    (19) expression -> expression / . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 48
    BOOLVAL                        shift and go to state 22

state 34

    (20) expression -> expression ^ . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 49
    BOOLVAL                        shift and go to state 22

state 35

    (21) expression -> expression EQUAL . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 50
    BOOLVAL                        shift and go to state 22

state 36

    (22) expression -> expression NEQUAL . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 51
    BOOLVAL                        shift and go to state 22

state 37

    (23) expression -> expression GEQUAL . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 52
    BOOLVAL                        shift and go to state 22

state 38

    (24) expression -> expression LEQUAL . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 53
    BOOLVAL                        shift and go to state 22

state 39

    (25) expression -> expression GREATER . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 54
    BOOLVAL                        shift and go to state 22

state 40

    (26) expression -> expression LESS . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 55
    BOOLVAL                        shift and go to state 22

state 41

    (27) expression -> - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    +               reduce using rule 27 (expression -> - expression .)
    -               reduce using rule 27 (expression -> - expression .)
    *               reduce using rule 27 (expression -> - expression .)
    /               reduce using rule 27 (expression -> - expression .)
    ^               reduce using rule 27 (expression -> - expression .)
    EQUAL           reduce using rule 27 (expression -> - expression .)
    NEQUAL          reduce using rule 27 (expression -> - expression .)
    GEQUAL          reduce using rule 27 (expression -> - expression .)
    LEQUAL          reduce using rule 27 (expression -> - expression .)
    GREATER         reduce using rule 27 (expression -> - expression .)
    LESS            reduce using rule 27 (expression -> - expression .)
    ;               reduce using rule 27 (expression -> - expression .)
    )               reduce using rule 27 (expression -> - expression .)

  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! ^               [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 42

    (28) expression -> ( expression . )
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    )               shift and go to state 56
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NEQUAL          shift and go to state 36
    GEQUAL          shift and go to state 37
    LEQUAL          shift and go to state 38
    GREATER         shift and go to state 39
    LESS            shift and go to state 40


state 43

    (14) declaration_full -> type NAME = . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . expression EQUAL expression
    (22) expression -> . expression NEQUAL expression
    (23) expression -> . expression GEQUAL expression
    (24) expression -> . expression LEQUAL expression
    (25) expression -> . expression GREATER expression
    (26) expression -> . expression LESS expression
    (27) expression -> . - expression
    (28) expression -> . ( expression )
    (29) expression -> . INUM
    (30) expression -> . FNUM
    (31) expression -> . BOOLVAL
    (32) expression -> . NAME
    (33) BOOLVAL -> . TRUE
    (34) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 57
    BOOLVAL                        shift and go to state 22

state 44

    (13) declaration_assign_expression -> NAME = expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    ;               reduce using rule 13 (declaration_assign_expression -> NAME = expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NEQUAL          shift and go to state 36
    GEQUAL          shift and go to state 37
    LEQUAL          shift and go to state 38
    GREATER         shift and go to state 39
    LESS            shift and go to state 40


state 45

    (16) expression -> expression + expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    +               reduce using rule 16 (expression -> expression + expression .)
    -               reduce using rule 16 (expression -> expression + expression .)
    EQUAL           reduce using rule 16 (expression -> expression + expression .)
    NEQUAL          reduce using rule 16 (expression -> expression + expression .)
    GEQUAL          reduce using rule 16 (expression -> expression + expression .)
    LEQUAL          reduce using rule 16 (expression -> expression + expression .)
    GREATER         reduce using rule 16 (expression -> expression + expression .)
    LESS            reduce using rule 16 (expression -> expression + expression .)
    ;               reduce using rule 16 (expression -> expression + expression .)
    )               reduce using rule 16 (expression -> expression + expression .)
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! *               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 46

    (17) expression -> expression - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    +               reduce using rule 17 (expression -> expression - expression .)
    -               reduce using rule 17 (expression -> expression - expression .)
    EQUAL           reduce using rule 17 (expression -> expression - expression .)
    NEQUAL          reduce using rule 17 (expression -> expression - expression .)
    GEQUAL          reduce using rule 17 (expression -> expression - expression .)
    LEQUAL          reduce using rule 17 (expression -> expression - expression .)
    GREATER         reduce using rule 17 (expression -> expression - expression .)
    LESS            reduce using rule 17 (expression -> expression - expression .)
    ;               reduce using rule 17 (expression -> expression - expression .)
    )               reduce using rule 17 (expression -> expression - expression .)
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! *               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 47

    (18) expression -> expression * expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    +               reduce using rule 18 (expression -> expression * expression .)
    -               reduce using rule 18 (expression -> expression * expression .)
    *               reduce using rule 18 (expression -> expression * expression .)
    /               reduce using rule 18 (expression -> expression * expression .)
    EQUAL           reduce using rule 18 (expression -> expression * expression .)
    NEQUAL          reduce using rule 18 (expression -> expression * expression .)
    GEQUAL          reduce using rule 18 (expression -> expression * expression .)
    LEQUAL          reduce using rule 18 (expression -> expression * expression .)
    GREATER         reduce using rule 18 (expression -> expression * expression .)
    LESS            reduce using rule 18 (expression -> expression * expression .)
    ;               reduce using rule 18 (expression -> expression * expression .)
    )               reduce using rule 18 (expression -> expression * expression .)
    ^               shift and go to state 34

  ! ^               [ reduce using rule 18 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 48

    (19) expression -> expression / expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    +               reduce using rule 19 (expression -> expression / expression .)
    -               reduce using rule 19 (expression -> expression / expression .)
    *               reduce using rule 19 (expression -> expression / expression .)
    /               reduce using rule 19 (expression -> expression / expression .)
    EQUAL           reduce using rule 19 (expression -> expression / expression .)
    NEQUAL          reduce using rule 19 (expression -> expression / expression .)
    GEQUAL          reduce using rule 19 (expression -> expression / expression .)
    LEQUAL          reduce using rule 19 (expression -> expression / expression .)
    GREATER         reduce using rule 19 (expression -> expression / expression .)
    LESS            reduce using rule 19 (expression -> expression / expression .)
    ;               reduce using rule 19 (expression -> expression / expression .)
    )               reduce using rule 19 (expression -> expression / expression .)
    ^               shift and go to state 34

  ! ^               [ reduce using rule 19 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 49

    (20) expression -> expression ^ expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    +               reduce using rule 20 (expression -> expression ^ expression .)
    -               reduce using rule 20 (expression -> expression ^ expression .)
    *               reduce using rule 20 (expression -> expression ^ expression .)
    /               reduce using rule 20 (expression -> expression ^ expression .)
    ^               reduce using rule 20 (expression -> expression ^ expression .)
    EQUAL           reduce using rule 20 (expression -> expression ^ expression .)
    NEQUAL          reduce using rule 20 (expression -> expression ^ expression .)
    GEQUAL          reduce using rule 20 (expression -> expression ^ expression .)
    LEQUAL          reduce using rule 20 (expression -> expression ^ expression .)
    GREATER         reduce using rule 20 (expression -> expression ^ expression .)
    LESS            reduce using rule 20 (expression -> expression ^ expression .)
    ;               reduce using rule 20 (expression -> expression ^ expression .)
    )               reduce using rule 20 (expression -> expression ^ expression .)

  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! ^               [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 50

    (21) expression -> expression EQUAL expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    EQUAL           reduce using rule 21 (expression -> expression EQUAL expression .)
    NEQUAL          reduce using rule 21 (expression -> expression EQUAL expression .)
    GEQUAL          reduce using rule 21 (expression -> expression EQUAL expression .)
    LEQUAL          reduce using rule 21 (expression -> expression EQUAL expression .)
    GREATER         reduce using rule 21 (expression -> expression EQUAL expression .)
    LESS            reduce using rule 21 (expression -> expression EQUAL expression .)
    ;               reduce using rule 21 (expression -> expression EQUAL expression .)
    )               reduce using rule 21 (expression -> expression EQUAL expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! +               [ reduce using rule 21 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 21 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 21 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 21 (expression -> expression EQUAL expression .) ]
  ! ^               [ reduce using rule 21 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 51

    (22) expression -> expression NEQUAL expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    EQUAL           reduce using rule 22 (expression -> expression NEQUAL expression .)
    NEQUAL          reduce using rule 22 (expression -> expression NEQUAL expression .)
    GEQUAL          reduce using rule 22 (expression -> expression NEQUAL expression .)
    LEQUAL          reduce using rule 22 (expression -> expression NEQUAL expression .)
    GREATER         reduce using rule 22 (expression -> expression NEQUAL expression .)
    LESS            reduce using rule 22 (expression -> expression NEQUAL expression .)
    ;               reduce using rule 22 (expression -> expression NEQUAL expression .)
    )               reduce using rule 22 (expression -> expression NEQUAL expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! +               [ reduce using rule 22 (expression -> expression NEQUAL expression .) ]
  ! -               [ reduce using rule 22 (expression -> expression NEQUAL expression .) ]
  ! *               [ reduce using rule 22 (expression -> expression NEQUAL expression .) ]
  ! /               [ reduce using rule 22 (expression -> expression NEQUAL expression .) ]
  ! ^               [ reduce using rule 22 (expression -> expression NEQUAL expression .) ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 52

    (23) expression -> expression GEQUAL expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    EQUAL           reduce using rule 23 (expression -> expression GEQUAL expression .)
    NEQUAL          reduce using rule 23 (expression -> expression GEQUAL expression .)
    GEQUAL          reduce using rule 23 (expression -> expression GEQUAL expression .)
    LEQUAL          reduce using rule 23 (expression -> expression GEQUAL expression .)
    GREATER         reduce using rule 23 (expression -> expression GEQUAL expression .)
    LESS            reduce using rule 23 (expression -> expression GEQUAL expression .)
    ;               reduce using rule 23 (expression -> expression GEQUAL expression .)
    )               reduce using rule 23 (expression -> expression GEQUAL expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! +               [ reduce using rule 23 (expression -> expression GEQUAL expression .) ]
  ! -               [ reduce using rule 23 (expression -> expression GEQUAL expression .) ]
  ! *               [ reduce using rule 23 (expression -> expression GEQUAL expression .) ]
  ! /               [ reduce using rule 23 (expression -> expression GEQUAL expression .) ]
  ! ^               [ reduce using rule 23 (expression -> expression GEQUAL expression .) ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 53

    (24) expression -> expression LEQUAL expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    EQUAL           reduce using rule 24 (expression -> expression LEQUAL expression .)
    NEQUAL          reduce using rule 24 (expression -> expression LEQUAL expression .)
    GEQUAL          reduce using rule 24 (expression -> expression LEQUAL expression .)
    LEQUAL          reduce using rule 24 (expression -> expression LEQUAL expression .)
    GREATER         reduce using rule 24 (expression -> expression LEQUAL expression .)
    LESS            reduce using rule 24 (expression -> expression LEQUAL expression .)
    ;               reduce using rule 24 (expression -> expression LEQUAL expression .)
    )               reduce using rule 24 (expression -> expression LEQUAL expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! +               [ reduce using rule 24 (expression -> expression LEQUAL expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression LEQUAL expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression LEQUAL expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression LEQUAL expression .) ]
  ! ^               [ reduce using rule 24 (expression -> expression LEQUAL expression .) ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 54

    (25) expression -> expression GREATER expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    EQUAL           reduce using rule 25 (expression -> expression GREATER expression .)
    NEQUAL          reduce using rule 25 (expression -> expression GREATER expression .)
    GEQUAL          reduce using rule 25 (expression -> expression GREATER expression .)
    LEQUAL          reduce using rule 25 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 25 (expression -> expression GREATER expression .)
    LESS            reduce using rule 25 (expression -> expression GREATER expression .)
    ;               reduce using rule 25 (expression -> expression GREATER expression .)
    )               reduce using rule 25 (expression -> expression GREATER expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! +               [ reduce using rule 25 (expression -> expression GREATER expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression GREATER expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression GREATER expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression GREATER expression .) ]
  ! ^               [ reduce using rule 25 (expression -> expression GREATER expression .) ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 55

    (26) expression -> expression LESS expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    EQUAL           reduce using rule 26 (expression -> expression LESS expression .)
    NEQUAL          reduce using rule 26 (expression -> expression LESS expression .)
    GEQUAL          reduce using rule 26 (expression -> expression LESS expression .)
    LEQUAL          reduce using rule 26 (expression -> expression LESS expression .)
    GREATER         reduce using rule 26 (expression -> expression LESS expression .)
    LESS            reduce using rule 26 (expression -> expression LESS expression .)
    ;               reduce using rule 26 (expression -> expression LESS expression .)
    )               reduce using rule 26 (expression -> expression LESS expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! +               [ reduce using rule 26 (expression -> expression LESS expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression LESS expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression LESS expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression LESS expression .) ]
  ! ^               [ reduce using rule 26 (expression -> expression LESS expression .) ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NEQUAL          [ shift and go to state 36 ]
  ! GEQUAL          [ shift and go to state 37 ]
  ! LEQUAL          [ shift and go to state 38 ]
  ! GREATER         [ shift and go to state 39 ]
  ! LESS            [ shift and go to state 40 ]


state 56

    (28) expression -> ( expression ) .

    +               reduce using rule 28 (expression -> ( expression ) .)
    -               reduce using rule 28 (expression -> ( expression ) .)
    *               reduce using rule 28 (expression -> ( expression ) .)
    /               reduce using rule 28 (expression -> ( expression ) .)
    ^               reduce using rule 28 (expression -> ( expression ) .)
    EQUAL           reduce using rule 28 (expression -> ( expression ) .)
    NEQUAL          reduce using rule 28 (expression -> ( expression ) .)
    GEQUAL          reduce using rule 28 (expression -> ( expression ) .)
    LEQUAL          reduce using rule 28 (expression -> ( expression ) .)
    GREATER         reduce using rule 28 (expression -> ( expression ) .)
    LESS            reduce using rule 28 (expression -> ( expression ) .)
    ;               reduce using rule 28 (expression -> ( expression ) .)
    )               reduce using rule 28 (expression -> ( expression ) .)


state 57

    (14) declaration_full -> type NAME = expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression -> expression . EQUAL expression
    (22) expression -> expression . NEQUAL expression
    (23) expression -> expression . GEQUAL expression
    (24) expression -> expression . LEQUAL expression
    (25) expression -> expression . GREATER expression
    (26) expression -> expression . LESS expression

    ;               reduce using rule 14 (declaration_full -> type NAME = expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NEQUAL          shift and go to state 36
    GEQUAL          shift and go to state 37
    LEQUAL          shift and go to state 38
    GREATER         shift and go to state 39
    LESS            shift and go to state 40

