Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> statement
Rule 2     statement -> declarations ; statement
Rule 3     statement -> print ; statement
Rule 4     statement -> empty
Rule 5     empty -> <empty>
Rule 6     type -> INT
Rule 7     type -> FLOAT
Rule 8     type -> BOOLEAN
Rule 9     declarations -> declaration_type_name
Rule 10    declarations -> declaration_assign_expression
Rule 11    declarations -> declaration_full
Rule 12    declaration_type_name -> type NAME
Rule 13    declaration_assign_expression -> NAME = expression
Rule 14    declaration_full -> type NAME = expression
Rule 15    print -> PRINT expression
Rule 16    expression -> expression + expression
Rule 17    expression -> expression - expression
Rule 18    expression -> expression * expression
Rule 19    expression -> expression / expression
Rule 20    expression -> expression ^ expression
Rule 21    expression -> - expression
Rule 22    expression -> ( expression )
Rule 23    expression -> INUM
Rule 24    expression -> FNUM
Rule 25    expression -> BOOLVAL
Rule 26    expression -> NAME
Rule 27    BOOLVAL -> TRUE
Rule 28    BOOLVAL -> FALSE

Terminals, with rules where they appear

(                    : 22
)                    : 22
*                    : 18
+                    : 16
-                    : 17 21
/                    : 19
;                    : 2 3
=                    : 13 14
BOOLEAN              : 8
FALSE                : 28
FLOAT                : 7
FNUM                 : 24
INT                  : 6
INUM                 : 23
NAME                 : 12 13 14 26
PRINT                : 15
TRUE                 : 27
^                    : 20
error                : 

Nonterminals, with rules where they appear

BOOLVAL              : 25
declaration_assign_expression : 10
declaration_full     : 11
declaration_type_name : 9
declarations         : 2
empty                : 4
expression           : 13 14 15 16 16 17 17 18 18 19 19 20 20 21 22
init                 : 0
print                : 3
statement            : 1 2 3
type                 : 12 14

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (9) declarations -> . declaration_type_name
    (10) declarations -> . declaration_assign_expression
    (11) declarations -> . declaration_full
    (15) print -> . PRINT expression
    (5) empty -> .
    (12) declaration_type_name -> . type NAME
    (13) declaration_assign_expression -> . NAME = expression
    (14) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    BOOLEAN         shift and go to state 14

    init                           shift and go to state 1
    statement                      shift and go to state 2
    declarations                   shift and go to state 3
    print                          shift and go to state 4
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 1

    (0) S' -> init .



state 2

    (1) init -> statement .

    $end            reduce using rule 1 (init -> statement .)


state 3

    (2) statement -> declarations . ; statement

    ;               shift and go to state 15


state 4

    (3) statement -> print . ; statement

    ;               shift and go to state 16


state 5

    (4) statement -> empty .

    $end            reduce using rule 4 (statement -> empty .)


state 6

    (9) declarations -> declaration_type_name .

    ;               reduce using rule 9 (declarations -> declaration_type_name .)


state 7

    (10) declarations -> declaration_assign_expression .

    ;               reduce using rule 10 (declarations -> declaration_assign_expression .)


state 8

    (11) declarations -> declaration_full .

    ;               reduce using rule 11 (declarations -> declaration_full .)


state 9

    (15) print -> PRINT . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 17
    BOOLVAL                        shift and go to state 22

state 10

    (12) declaration_type_name -> type . NAME
    (14) declaration_full -> type . NAME = expression

    NAME            shift and go to state 26


state 11

    (13) declaration_assign_expression -> NAME . = expression

    =               shift and go to state 27


state 12

    (6) type -> INT .

    NAME            reduce using rule 6 (type -> INT .)


state 13

    (7) type -> FLOAT .

    NAME            reduce using rule 7 (type -> FLOAT .)


state 14

    (8) type -> BOOLEAN .

    NAME            reduce using rule 8 (type -> BOOLEAN .)


state 15

    (2) statement -> declarations ; . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (9) declarations -> . declaration_type_name
    (10) declarations -> . declaration_assign_expression
    (11) declarations -> . declaration_full
    (15) print -> . PRINT expression
    (5) empty -> .
    (12) declaration_type_name -> . type NAME
    (13) declaration_assign_expression -> . NAME = expression
    (14) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    BOOLEAN         shift and go to state 14

    declarations                   shift and go to state 3
    statement                      shift and go to state 28
    print                          shift and go to state 4
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 16

    (3) statement -> print ; . statement
    (2) statement -> . declarations ; statement
    (3) statement -> . print ; statement
    (4) statement -> . empty
    (9) declarations -> . declaration_type_name
    (10) declarations -> . declaration_assign_expression
    (11) declarations -> . declaration_full
    (15) print -> . PRINT expression
    (5) empty -> .
    (12) declaration_type_name -> . type NAME
    (13) declaration_assign_expression -> . NAME = expression
    (14) declaration_full -> . type NAME = expression
    (6) type -> . INT
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    PRINT           shift and go to state 9
    $end            reduce using rule 5 (empty -> .)
    NAME            shift and go to state 11
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    BOOLEAN         shift and go to state 14

    print                          shift and go to state 4
    statement                      shift and go to state 29
    declarations                   shift and go to state 3
    empty                          shift and go to state 5
    declaration_type_name          shift and go to state 6
    declaration_assign_expression  shift and go to state 7
    declaration_full               shift and go to state 8
    type                           shift and go to state 10

state 17

    (15) print -> PRINT expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    ;               reduce using rule 15 (print -> PRINT expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34


state 18

    (21) expression -> - . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 35
    BOOLVAL                        shift and go to state 22

state 19

    (22) expression -> ( . expression )
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 36
    BOOLVAL                        shift and go to state 22

state 20

    (23) expression -> INUM .

    +               reduce using rule 23 (expression -> INUM .)
    -               reduce using rule 23 (expression -> INUM .)
    *               reduce using rule 23 (expression -> INUM .)
    /               reduce using rule 23 (expression -> INUM .)
    ^               reduce using rule 23 (expression -> INUM .)
    ;               reduce using rule 23 (expression -> INUM .)
    )               reduce using rule 23 (expression -> INUM .)


state 21

    (24) expression -> FNUM .

    +               reduce using rule 24 (expression -> FNUM .)
    -               reduce using rule 24 (expression -> FNUM .)
    *               reduce using rule 24 (expression -> FNUM .)
    /               reduce using rule 24 (expression -> FNUM .)
    ^               reduce using rule 24 (expression -> FNUM .)
    ;               reduce using rule 24 (expression -> FNUM .)
    )               reduce using rule 24 (expression -> FNUM .)


state 22

    (25) expression -> BOOLVAL .

    +               reduce using rule 25 (expression -> BOOLVAL .)
    -               reduce using rule 25 (expression -> BOOLVAL .)
    *               reduce using rule 25 (expression -> BOOLVAL .)
    /               reduce using rule 25 (expression -> BOOLVAL .)
    ^               reduce using rule 25 (expression -> BOOLVAL .)
    ;               reduce using rule 25 (expression -> BOOLVAL .)
    )               reduce using rule 25 (expression -> BOOLVAL .)


state 23

    (26) expression -> NAME .

    +               reduce using rule 26 (expression -> NAME .)
    -               reduce using rule 26 (expression -> NAME .)
    *               reduce using rule 26 (expression -> NAME .)
    /               reduce using rule 26 (expression -> NAME .)
    ^               reduce using rule 26 (expression -> NAME .)
    ;               reduce using rule 26 (expression -> NAME .)
    )               reduce using rule 26 (expression -> NAME .)


state 24

    (27) BOOLVAL -> TRUE .

    +               reduce using rule 27 (BOOLVAL -> TRUE .)
    -               reduce using rule 27 (BOOLVAL -> TRUE .)
    *               reduce using rule 27 (BOOLVAL -> TRUE .)
    /               reduce using rule 27 (BOOLVAL -> TRUE .)
    ^               reduce using rule 27 (BOOLVAL -> TRUE .)
    ;               reduce using rule 27 (BOOLVAL -> TRUE .)
    )               reduce using rule 27 (BOOLVAL -> TRUE .)


state 25

    (28) BOOLVAL -> FALSE .

    +               reduce using rule 28 (BOOLVAL -> FALSE .)
    -               reduce using rule 28 (BOOLVAL -> FALSE .)
    *               reduce using rule 28 (BOOLVAL -> FALSE .)
    /               reduce using rule 28 (BOOLVAL -> FALSE .)
    ^               reduce using rule 28 (BOOLVAL -> FALSE .)
    ;               reduce using rule 28 (BOOLVAL -> FALSE .)
    )               reduce using rule 28 (BOOLVAL -> FALSE .)


state 26

    (12) declaration_type_name -> type NAME .
    (14) declaration_full -> type NAME . = expression

    ;               reduce using rule 12 (declaration_type_name -> type NAME .)
    =               shift and go to state 37


state 27

    (13) declaration_assign_expression -> NAME = . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 38
    BOOLVAL                        shift and go to state 22

state 28

    (2) statement -> declarations ; statement .

    $end            reduce using rule 2 (statement -> declarations ; statement .)


state 29

    (3) statement -> print ; statement .

    $end            reduce using rule 3 (statement -> print ; statement .)


state 30

    (16) expression -> expression + . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 39
    BOOLVAL                        shift and go to state 22

state 31

    (17) expression -> expression - . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 40
    BOOLVAL                        shift and go to state 22

state 32

    (18) expression -> expression * . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 41
    BOOLVAL                        shift and go to state 22

state 33

    (19) expression -> expression / . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 42
    BOOLVAL                        shift and go to state 22

state 34

    (20) expression -> expression ^ . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 43
    BOOLVAL                        shift and go to state 22

state 35

    (21) expression -> - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    +               reduce using rule 21 (expression -> - expression .)
    -               reduce using rule 21 (expression -> - expression .)
    *               reduce using rule 21 (expression -> - expression .)
    /               reduce using rule 21 (expression -> - expression .)
    ^               reduce using rule 21 (expression -> - expression .)
    ;               reduce using rule 21 (expression -> - expression .)
    )               reduce using rule 21 (expression -> - expression .)

  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! ^               [ shift and go to state 34 ]


state 36

    (22) expression -> ( expression . )
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    )               shift and go to state 44
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34


state 37

    (14) declaration_full -> type NAME = . expression
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (21) expression -> . - expression
    (22) expression -> . ( expression )
    (23) expression -> . INUM
    (24) expression -> . FNUM
    (25) expression -> . BOOLVAL
    (26) expression -> . NAME
    (27) BOOLVAL -> . TRUE
    (28) BOOLVAL -> . FALSE

    -               shift and go to state 18
    (               shift and go to state 19
    INUM            shift and go to state 20
    FNUM            shift and go to state 21
    NAME            shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25

    expression                     shift and go to state 45
    BOOLVAL                        shift and go to state 22

state 38

    (13) declaration_assign_expression -> NAME = expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    ;               reduce using rule 13 (declaration_assign_expression -> NAME = expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34


state 39

    (16) expression -> expression + expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    +               reduce using rule 16 (expression -> expression + expression .)
    -               reduce using rule 16 (expression -> expression + expression .)
    ;               reduce using rule 16 (expression -> expression + expression .)
    )               reduce using rule 16 (expression -> expression + expression .)
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! *               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]


state 40

    (17) expression -> expression - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    +               reduce using rule 17 (expression -> expression - expression .)
    -               reduce using rule 17 (expression -> expression - expression .)
    ;               reduce using rule 17 (expression -> expression - expression .)
    )               reduce using rule 17 (expression -> expression - expression .)
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

  ! *               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]


state 41

    (18) expression -> expression * expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    +               reduce using rule 18 (expression -> expression * expression .)
    -               reduce using rule 18 (expression -> expression * expression .)
    *               reduce using rule 18 (expression -> expression * expression .)
    /               reduce using rule 18 (expression -> expression * expression .)
    ;               reduce using rule 18 (expression -> expression * expression .)
    )               reduce using rule 18 (expression -> expression * expression .)
    ^               shift and go to state 34

  ! ^               [ reduce using rule 18 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]


state 42

    (19) expression -> expression / expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    +               reduce using rule 19 (expression -> expression / expression .)
    -               reduce using rule 19 (expression -> expression / expression .)
    *               reduce using rule 19 (expression -> expression / expression .)
    /               reduce using rule 19 (expression -> expression / expression .)
    ;               reduce using rule 19 (expression -> expression / expression .)
    )               reduce using rule 19 (expression -> expression / expression .)
    ^               shift and go to state 34

  ! ^               [ reduce using rule 19 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]


state 43

    (20) expression -> expression ^ expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    +               reduce using rule 20 (expression -> expression ^ expression .)
    -               reduce using rule 20 (expression -> expression ^ expression .)
    *               reduce using rule 20 (expression -> expression ^ expression .)
    /               reduce using rule 20 (expression -> expression ^ expression .)
    ^               reduce using rule 20 (expression -> expression ^ expression .)
    ;               reduce using rule 20 (expression -> expression ^ expression .)
    )               reduce using rule 20 (expression -> expression ^ expression .)

  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! ^               [ shift and go to state 34 ]


state 44

    (22) expression -> ( expression ) .

    +               reduce using rule 22 (expression -> ( expression ) .)
    -               reduce using rule 22 (expression -> ( expression ) .)
    *               reduce using rule 22 (expression -> ( expression ) .)
    /               reduce using rule 22 (expression -> ( expression ) .)
    ^               reduce using rule 22 (expression -> ( expression ) .)
    ;               reduce using rule 22 (expression -> ( expression ) .)
    )               reduce using rule 22 (expression -> ( expression ) .)


state 45

    (14) declaration_full -> type NAME = expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    ;               reduce using rule 14 (declaration_full -> type NAME = expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34

